[profile.default]

src = 'src'
test = 'test'
libs = ['lib']

out = 'build'
cache_path = 'cache'

via_ir = true
optimizer = true
optimizer_runs = 4294967295
gas_reports = []

auto_detect_remappings = false
remappings = [
    'ds-test/=lib/forge-std/lib/ds-test/src/',
    'forge-std/=lib/forge-std/src/',

    'clones-with-immutable-args/=lib/clones-with-immutable-args/src/',
    'openzeppelin-contracts/=lib/openzeppelin-contracts/',
    'solady/=lib/solady/src/',
    'solmate/=lib/solmate/src/',
    'v3-core/=lib/v3-core/'
]

[fuzz]
runs = 4096

[fmt]
line_length = 120
tab_width = 4
bracket_spacing = false
int_types = 'long'
multiline_func_header = 'params_first'
quote_style = 'double'
number_underscore = 'preserve'
override_spacing = true

[doc]
title = 'Aloe II'

[invariant]
runs = 256                 # The number of runs for each invariant test.
depth = 200                # The number of calls executed to attempt to break invariants in one run.
fail_on_revert = true      # Fails the invariant test if a revert occurs.
call_override = false      # Allows overriding an unsafe external call when running invariant tests, e.g. reentrancy checks (this feature is still a WIP).
dictionary_weight = 75     # Use values collected from your contracts 75% of the time, random 25% of the time.
include_storage = true     # Collect values from contract storage and add them to the dictionary.
include_push_bytes = true  # Collect PUSH bytes from the contract code and add them to the dictionary.

[rpc_endpoints]
mainnet = "${RPC_URL_MAINNET}"
goerli = "${RPC_URL_GOERLI}"
optimism = "${RPC_URL_OPTIMISM}"
arbitrum = "${RPC_URL_ARBITRUM}"
base = "${RPC_URL_BASE}"
anvil = "http://127.0.0.1:8545"

[etherscan]
mainnet = { key = "${ETHERSCAN_API_KEY}" }
goerli = { key = "${ETHERSCAN_API_KEY}" }
optimism = { key = "${ETHERSCAN_API_KEY_OPTIMISM}" }
arbitrum = { key = "${ETHERSCAN_API_KEY_ARBITRUM}" }
base = { key = "${ETHERSCAN_API_KEY_BASE}", url = "https://api.basescan.org/api" }

[profile.gambit.invariant]
runs = 5
depth = 100
